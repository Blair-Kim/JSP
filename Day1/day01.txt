



				  요청(request)
		클라이언트	--------------->	서버
		(브라우저)	<---------------   (웹서버 소프트웨어)
				  응답(response)

요청(request)
- 클라이언트에서 서버쪽으로 HTML 문서를 요청하는 것을 의미
- 접근하고자 하는 페이지(URL)을 브라우저를 통해 알려줌
- GET 또는 POST 방식으로 요청

응답(response)
- 서버에서 결과를 HTML 문서를 통해 클라이언트쪽으로 보여주는 것을 의미
- 상태코드(성공여부)와 컨텐츠 타입(텍스트,이미지,HTML,XML,JSON..등), 
컨텐츠(HTML코드,이미지,문자열...등)을 전달


프로토콜(Protocol)
- 컴퓨터등 간의 정보 교환에서 통신을 위해 미리 정해놓은 규약
(http, https, ftp, smtp, pop3, tcp/ip..등)

HTTP(HyperText Transfer Protocol)
- tcp/ip 기반의 웹용 프로토콜
- header와 body로 구성
- 웹 서버에서 서버-클라이언트 사이에 요청/응답이 가능하도록 만들어진 규약

URL(Uniform Resource Locator)
- 네트워크상에서 자원이 어디에 있는지 알려주기 위한 규약

	http://www.ryuzy.com:8080/blog/index.jsp
	----------------------------------------- URL
	...	........     ....  ............
      프로토콜   도메인     포트번호   자원의위치

URI(Uniform Resource identifire)
- URL은 자원의 위치만 나타내는 반변, URI는 자원의 위치에 전달할 인자까지 포함하는 규약

	http://www.ryuzy.com:8080/blog/index.jsp/userid=apple&gender=female
						 --------------------------
							데이터를 전달하는 인자

포트(port)
- 서버 하드웨어상에서 돌아가는 소프트웨어를 구분하기 위한 숫자값
- 사용범위: 0 ~ 65535 (0~1023까지는 운영체제 또는 별도 서비스를 사용하기 위해 예약)

웹 서버(web server)
- 클라이언트로부터 요청을 받아 요청한 내용을 응답해주는 프로그램
- 웹서버는 정적인 페이지(HTML,CSS,JavaScript,이미지...)만 전달함
- 동적인 컨텐츠 생성이 불가능
- 대표적인 웹서버 프로그램은 Apache, NGINX, IIS, zeus, Mongoose ... 등

웹 어플리케이션 서버(web application server)
- 동적인 부분을 담당
- 프로그램 실행 환경과 데이터베이스 접속기능을 제공
- 업무를 처리하는 비즈니스 로직을 수행
- 대표적인 WAS는 tomcat

tomcat 다운로드
http://tomcat.apache.org/

서버 실행
http://localhost:8080
http://127.0.0.1:8080
httP://192.168.6.254.


JSP(Java Sever Page)
- HTML 코드에 Java 코드를 넣어 동적 웹페이지를 생성하는 웹 어플리케이션 도구
- JSP가 실행되면 자바 서블릿(Servlet)으로 변환되며 웹 어플리케이션 서버에서 동작하여 필요한 기능을 수행하고
생성된 데이터를 웹페이지와 함께 클라이언트로 전달

			    xxx.jsp
	클라이언트	------------------>	서블릿컨테이너
						jsp -> Servlet -> class -> html
			<-----------------
			    html 형태


JSP의 장점
- Java코드에 HTML코드가 삽입되는 문제를 해결
- 퍼블리셔와 협업이 가능
- 간단한 페이지를 구현할 때는 JSP문서로 제작하는 것이 개발 시간을 절약하는 방법 중 하나

JSP의 단점
- 복잡한 로직을 구현할 때 HTML 중심의 코드가 이해하기 어렵게 만들 수 있음
- 프로그래밍 언어를 모르는 사람이 실수로 코드를 망칠 수 있음
- core 적인 부분의 로직의 유출을 막기 위해 Java단에서 로직으로 작성하는 방법이 보안상 유리

스크립트 태그
- JSP는 HTML문서에 자바코드를 넣어 프로그램을 수행하는 기능을 구현
- 선언문
	<%! ~~~~~ %>
	자바 변수나 메소드를 정의할 때 사용하는 태그
- 스크립툴릿
	<% ~~~~~ %>
	자바 변수 선언 및 자바 로직코드를 작성하는데 사용하는 태그
- 표현문
	<%= ~~~ %>
	변수, 계산식, 메소드 호출 결과를 출력하는 태그
디렉티브 태그
- 현재 JSP 페이지에 대한 정보를 설정하는 태그
- 페이지 최상단에 선언
	<%@ page ~~~ %>
	import : 클래스를 사용
	language : 사용할 프로그래밍 언어 설정
	contentType : 생성할 문서의 컨텐츠 유형
	pageEncoding : 페이지 문자 인코딩을 설정


method
GET
- 간단한 요청을 보낼 때 사용
- 내용의 크기가 제한적
- 데이터가 노출됨
- URL 뒤에 전송할 데이터를 붙여서 보냄
- 단순히 서버에게 자원을 요청할 때 사용
- 전송과 응답의 속도가 빠른편

POST
- 복잡한 요청을 보낼 때 사용
- 전송할 데이터를 body에 넣어서 요청
- 데이터를 body에 넣어서 요청하기 때문에 노출되지 않음
- 내용의 크기 제한이 없음
- get 방식에 비해 속도가 느림






















